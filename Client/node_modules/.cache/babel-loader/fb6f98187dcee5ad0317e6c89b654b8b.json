{"ast":null,"code":"'use strict'; // Load Date class extensions\n\nvar CronDate = require('./date'); // Get Number.isNaN or the polyfill\n\n\nvar safeIsNaN = require('is-nan');\n\nvar stringifyField = require('./field_stringify');\n/**\n * Cron iteration loop safety limit\n */\n\n\nvar LOOP_LIMIT = 10000;\n/**\n * Construct a new expression parser\n *\n * Options:\n *   currentDate: iterator start date\n *   endDate: iterator end date\n *\n * @constructor\n * @private\n * @param {Object} fields  Expression fields parsed values\n * @param {Object} options Parser options\n */\n\nfunction CronExpression(fields, options) {\n  this._options = options;\n  this._utc = options.utc || false;\n  this._tz = this._utc ? 'UTC' : options.tz;\n  this._currentDate = new CronDate(options.currentDate, this._tz);\n  this._startDate = options.startDate ? new CronDate(options.startDate, this._tz) : null;\n  this._endDate = options.endDate ? new CronDate(options.endDate, this._tz) : null;\n  this._isIterator = options.iterator || false;\n  this._hasIterated = false;\n  this._nthDayOfWeek = options.nthDayOfWeek || 0;\n  this.fields = CronExpression._freezeFields(fields);\n}\n/**\n * Field mappings\n * @type {Array}\n */\n\n\nCronExpression.map = ['second', 'minute', 'hour', 'dayOfMonth', 'month', 'dayOfWeek'];\n/**\n * Prefined intervals\n * @type {Object}\n */\n\nCronExpression.predefined = {\n  '@yearly': '0 0 1 1 *',\n  '@monthly': '0 0 1 * *',\n  '@weekly': '0 0 * * 0',\n  '@daily': '0 0 * * *',\n  '@hourly': '0 * * * *'\n};\n/**\n * Fields constraints\n * @type {Array}\n */\n\nCronExpression.constraints = [{\n  min: 0,\n  max: 59,\n  chars: []\n}, // Second\n{\n  min: 0,\n  max: 59,\n  chars: []\n}, // Minute\n{\n  min: 0,\n  max: 23,\n  chars: []\n}, // Hour\n{\n  min: 1,\n  max: 31,\n  chars: ['L']\n}, // Day of month\n{\n  min: 1,\n  max: 12,\n  chars: []\n}, // Month\n{\n  min: 0,\n  max: 7,\n  chars: []\n} // Day of week\n];\n/**\n * Days in month\n * @type {number[]}\n */\n\nCronExpression.daysInMonth = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n/**\n * Field aliases\n * @type {Object}\n */\n\nCronExpression.aliases = {\n  month: {\n    jan: 1,\n    feb: 2,\n    mar: 3,\n    apr: 4,\n    may: 5,\n    jun: 6,\n    jul: 7,\n    aug: 8,\n    sep: 9,\n    oct: 10,\n    nov: 11,\n    dec: 12\n  },\n  dayOfWeek: {\n    sun: 0,\n    mon: 1,\n    tue: 2,\n    wed: 3,\n    thu: 4,\n    fri: 5,\n    sat: 6\n  }\n};\n/**\n * Field defaults\n * @type {Array}\n */\n\nCronExpression.parseDefaults = ['0', '*', '*', '*', '*', '*'];\nCronExpression.standardValidCharacters = /^[\\d|/|*|\\-|,]+$/;\nCronExpression.dayOfWeekValidCharacters = /^[\\d|/|*|\\-|,|\\?]+$/;\nCronExpression.dayOfMonthValidCharacters = /^[\\d|L|/|*|\\-|,|\\?]+$/;\nCronExpression.validCharacters = {\n  second: CronExpression.standardValidCharacters,\n  minute: CronExpression.standardValidCharacters,\n  hour: CronExpression.standardValidCharacters,\n  dayOfMonth: CronExpression.dayOfMonthValidCharacters,\n  month: CronExpression.standardValidCharacters,\n  dayOfWeek: CronExpression.dayOfWeekValidCharacters\n};\n/**\n * Parse input interval\n *\n * @param {String} field Field symbolic name\n * @param {String} value Field value\n * @param {Array} constraints Range upper and lower constraints\n * @return {Array} Sequence of sorted values\n * @private\n */\n\nCronExpression._parseField = function _parseField(field, value, constraints) {\n  // Replace aliases\n  switch (field) {\n    case 'month':\n    case 'dayOfWeek':\n      var aliases = CronExpression.aliases[field];\n      value = value.replace(/[a-z]{1,3}/gi, function (match) {\n        match = match.toLowerCase();\n\n        if (typeof aliases[match] !== 'undefined') {\n          return aliases[match];\n        } else {\n          throw new Error('Validation error, cannot resolve alias \"' + match + '\"');\n        }\n      });\n      break;\n  } // Check for valid characters.\n\n\n  if (!CronExpression.validCharacters[field].test(value)) {\n    throw new Error('Invalid characters, got value: ' + value);\n  } // Replace '*' and '?'\n\n\n  if (value.indexOf('*') !== -1) {\n    value = value.replace(/\\*/g, constraints.min + '-' + constraints.max);\n  } else if (value.indexOf('?') !== -1) {\n    value = value.replace(/\\?/g, constraints.min + '-' + constraints.max);\n  } //\n  // Inline parsing functions\n  //\n  // Parser path:\n  //  - parseSequence\n  //    - parseRepeat\n  //      - parseRange\n\n  /**\n   * Parse sequence\n   *\n   * @param {String} val\n   * @return {Array}\n   * @private\n   */\n\n\n  function parseSequence(val) {\n    var stack = [];\n\n    function handleResult(result) {\n      if (result instanceof Array) {\n        // Make sequence linear\n        for (var i = 0, c = result.length; i < c; i++) {\n          var value = result[i];\n\n          if (typeof value === 'string' && constraints.chars.indexOf(value) > -1) {\n            stack.push(value);\n            continue;\n          } // Check constraints\n\n\n          if (typeof value !== 'number' || safeIsNaN(value) || value < constraints.min || value > constraints.max) {\n            throw new Error('Constraint error, got value ' + value + ' expected range ' + constraints.min + '-' + constraints.max);\n          }\n\n          stack.push(value);\n        }\n      } else {\n        // Scalar value\n        if (typeof result === 'string' && constraints.chars.indexOf(result) > -1) {\n          stack.push(result);\n          return;\n        }\n\n        var numResult = +result; // Check constraints\n\n        if (safeIsNaN(numResult) || numResult < constraints.min || numResult > constraints.max) {\n          throw new Error('Constraint error, got value ' + result + ' expected range ' + constraints.min + '-' + constraints.max);\n        }\n\n        if (field === 'dayOfWeek') {\n          numResult = numResult % 7;\n        }\n\n        stack.push(numResult);\n      }\n    }\n\n    var atoms = val.split(',');\n\n    if (!atoms.every(function (atom) {\n      return atom.length > 0;\n    })) {\n      throw new Error('Invalid list value format');\n    }\n\n    if (atoms.length > 1) {\n      for (var i = 0, c = atoms.length; i < c; i++) {\n        handleResult(parseRepeat(atoms[i]));\n      }\n    } else {\n      handleResult(parseRepeat(val));\n    }\n\n    stack.sort(CronExpression._sortCompareFn);\n    return stack;\n  }\n  /**\n   * Parse repetition interval\n   *\n   * @param {String} val\n   * @return {Array}\n   */\n\n\n  function parseRepeat(val) {\n    var repeatInterval = 1;\n    var atoms = val.split('/');\n\n    if (atoms.length > 1) {\n      if (atoms[0] == +atoms[0]) {\n        atoms = [atoms[0] + '-' + constraints.max, atoms[1]];\n      }\n\n      return parseRange(atoms[0], atoms[atoms.length - 1]);\n    }\n\n    return parseRange(val, repeatInterval);\n  }\n  /**\n   * Parse range\n   *\n   * @param {String} val\n   * @param {Number} repeatInterval Repetition interval\n   * @return {Array}\n   * @private\n   */\n\n\n  function parseRange(val, repeatInterval) {\n    var stack = [];\n    var atoms = val.split('-');\n\n    if (atoms.length > 1) {\n      // Invalid range, return value\n      if (atoms.length < 2) {\n        return +val;\n      }\n\n      if (!atoms[0].length) {\n        if (!atoms[1].length) {\n          throw new Error('Invalid range: ' + val);\n        }\n\n        return +val;\n      } // Validate range\n\n\n      var min = +atoms[0];\n      var max = +atoms[1];\n\n      if (safeIsNaN(min) || safeIsNaN(max) || min < constraints.min || max > constraints.max) {\n        throw new Error('Constraint error, got range ' + min + '-' + max + ' expected range ' + constraints.min + '-' + constraints.max);\n      } else if (min >= max) {\n        throw new Error('Invalid range: ' + val);\n      } // Create range\n\n\n      var repeatIndex = +repeatInterval;\n\n      if (safeIsNaN(repeatIndex) || repeatIndex <= 0) {\n        throw new Error('Constraint error, cannot repeat at every ' + repeatIndex + ' time.');\n      }\n\n      for (var index = min, count = max; index <= count; index++) {\n        if (repeatIndex > 0 && repeatIndex % repeatInterval === 0) {\n          repeatIndex = 1;\n          stack.push(index);\n        } else {\n          repeatIndex++;\n        }\n      }\n\n      return stack;\n    }\n\n    return safeIsNaN(+val) ? val : +val;\n  }\n\n  return parseSequence(value);\n};\n\nCronExpression._sortCompareFn = function (a, b) {\n  var aIsNumber = typeof a === 'number';\n  var bIsNumber = typeof b === 'number';\n\n  if (aIsNumber && bIsNumber) {\n    return a - b;\n  }\n\n  if (!aIsNumber && bIsNumber) {\n    return 1;\n  }\n\n  if (aIsNumber && !bIsNumber) {\n    return -1;\n  }\n\n  return a.localeCompare(b);\n};\n\nCronExpression._handleMaxDaysInMonth = function (mappedFields) {\n  // Filter out any day of month value that is larger than given month expects\n  if (mappedFields.month.length === 1) {\n    var daysInMonth = CronExpression.daysInMonth[mappedFields.month[0] - 1];\n\n    if (mappedFields.dayOfMonth[0] > daysInMonth) {\n      throw new Error('Invalid explicit day of month definition');\n    }\n\n    return mappedFields.dayOfMonth.filter(function (dayOfMonth) {\n      return dayOfMonth === 'L' ? true : dayOfMonth <= daysInMonth;\n    }).sort(CronExpression._sortCompareFn);\n  }\n};\n\nCronExpression._freezeFields = function (fields) {\n  for (var i = 0, c = CronExpression.map.length; i < c; ++i) {\n    var field = CronExpression.map[i]; // Field name\n\n    var value = fields[field];\n    fields[field] = Object.freeze(value);\n  }\n\n  return Object.freeze(fields);\n};\n\nCronExpression.prototype._applyTimezoneShift = function (currentDate, dateMathVerb, method) {\n  if (method === 'Month' || method === 'Day') {\n    var prevTime = currentDate.getTime();\n    currentDate[dateMathVerb + method]();\n    var currTime = currentDate.getTime();\n\n    if (prevTime === currTime) {\n      // Jumped into a not existent date due to a DST transition\n      if (currentDate.getMinutes() === 0 && currentDate.getSeconds() === 0) {\n        currentDate.addHour();\n      } else if (currentDate.getMinutes() === 59 && currentDate.getSeconds() === 59) {\n        currentDate.subtractHour();\n      }\n    }\n  } else {\n    var previousHour = currentDate.getHours();\n    currentDate[dateMathVerb + method]();\n    var currentHour = currentDate.getHours();\n    var diff = currentHour - previousHour;\n\n    if (diff === 2) {\n      // Starting DST\n      if (this.fields.hour.length !== 24) {\n        // Hour is specified\n        this._dstStart = currentHour;\n      }\n    } else if (diff === 0 && currentDate.getMinutes() === 0 && currentDate.getSeconds() === 0) {\n      // Ending DST\n      if (this.fields.hour.length !== 24) {\n        // Hour is specified\n        this._dstEnd = currentHour;\n      }\n    }\n  }\n};\n/**\n * Find next or previous matching schedule date\n *\n * @return {CronDate}\n * @private\n */\n\n\nCronExpression.prototype._findSchedule = function _findSchedule(reverse) {\n  /**\n   * Match field value\n   *\n   * @param {String} value\n   * @param {Array} sequence\n   * @return {Boolean}\n   * @private\n   */\n  function matchSchedule(value, sequence) {\n    for (var i = 0, c = sequence.length; i < c; i++) {\n      if (sequence[i] >= value) {\n        return sequence[i] === value;\n      }\n    }\n\n    return sequence[0] === value;\n  }\n  /**\n   * Helps determine if the provided date is the correct nth occurence of the\n   * desired day of week.\n   *\n   * @param {CronDate} date\n   * @param {Number} nthDayOfWeek\n   * @return {Boolean}\n   * @private\n   */\n\n\n  function isNthDayMatch(date, nthDayOfWeek) {\n    if (nthDayOfWeek < 6) {\n      if (date.getDate() < 8 && nthDayOfWeek === 1 // First occurence has to happen in first 7 days of the month\n      ) {\n        return true;\n      }\n\n      var offset = date.getDate() % 7 ? 1 : 0; // Math is off by 1 when dayOfWeek isn't divisible by 7\n\n      var adjustedDate = date.getDate() - date.getDate() % 7; // find the first occurance\n\n      var occurrence = Math.floor(adjustedDate / 7) + offset;\n      return occurrence === nthDayOfWeek;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function that checks if 'L' is in the array\n   *\n   * @param {Array} dayOfMonth\n   */\n\n\n  function isLInDayOfMonth(dayOfMonth) {\n    return dayOfMonth.length > 0 && dayOfMonth.indexOf('L') >= 0;\n  } // Whether to use backwards directionality when searching\n\n\n  reverse = reverse || false;\n  var dateMathVerb = reverse ? 'subtract' : 'add';\n  var currentDate = new CronDate(this._currentDate, this._tz);\n  var startDate = this._startDate;\n  var endDate = this._endDate; // Find matching schedule\n\n  var startTimestamp = currentDate.getTime();\n  var stepCount = 0;\n\n  while (stepCount < LOOP_LIMIT) {\n    stepCount++; // Validate timespan\n\n    if (reverse) {\n      if (startDate && currentDate.getTime() - startDate.getTime() < 0) {\n        throw new Error('Out of the timespan range');\n      }\n    } else {\n      if (endDate && endDate.getTime() - currentDate.getTime() < 0) {\n        throw new Error('Out of the timespan range');\n      }\n    } // Day of month and week matching:\n    //\n    // \"The day of a command's execution can be specified by two fields --\n    // day of month, and day of week.  If  both\t fields\t are  restricted  (ie,\n    // aren't  *),  the command will be run when either field matches the cur-\n    // rent time.  For example, \"30 4 1,15 * 5\" would cause a command to be\n    // run at 4:30 am on the  1st and 15th of each month, plus every Friday.\"\n    //\n    // http://unixhelp.ed.ac.uk/CGI/man-cgi?crontab+5\n    //\n\n\n    var dayOfMonthMatch = matchSchedule(currentDate.getDate(), this.fields.dayOfMonth);\n\n    if (isLInDayOfMonth(this.fields.dayOfMonth)) {\n      dayOfMonthMatch = dayOfMonthMatch || currentDate.isLastDayOfMonth();\n    }\n\n    var dayOfWeekMatch = matchSchedule(currentDate.getDay(), this.fields.dayOfWeek);\n    var isDayOfMonthWildcardMatch = this.fields.dayOfMonth.length >= CronExpression.daysInMonth[currentDate.getMonth()];\n    var isDayOfWeekWildcardMatch = this.fields.dayOfWeek.length === CronExpression.constraints[5].max - CronExpression.constraints[5].min + 1;\n    var currentHour = currentDate.getHours(); // Add or subtract day if select day not match with month (according to calendar)\n\n    if (!dayOfMonthMatch && !dayOfWeekMatch) {\n      this._applyTimezoneShift(currentDate, dateMathVerb, 'Day');\n\n      continue;\n    } // Add or subtract day if not day of month is set (and no match) and day of week is wildcard\n\n\n    if (!isDayOfMonthWildcardMatch && isDayOfWeekWildcardMatch && !dayOfMonthMatch) {\n      this._applyTimezoneShift(currentDate, dateMathVerb, 'Day');\n\n      continue;\n    } // Add or subtract day if not day of week is set (and no match) and day of month is wildcard\n\n\n    if (isDayOfMonthWildcardMatch && !isDayOfWeekWildcardMatch && !dayOfWeekMatch) {\n      this._applyTimezoneShift(currentDate, dateMathVerb, 'Day');\n\n      continue;\n    } // Add or subtract day if day of week & nthDayOfWeek are set (and no match)\n\n\n    if (this._nthDayOfWeek > 0 && !isNthDayMatch(currentDate, this._nthDayOfWeek)) {\n      this._applyTimezoneShift(currentDate, dateMathVerb, 'Day');\n\n      continue;\n    } // Match month\n\n\n    if (!matchSchedule(currentDate.getMonth() + 1, this.fields.month)) {\n      this._applyTimezoneShift(currentDate, dateMathVerb, 'Month');\n\n      continue;\n    } // Match hour\n\n\n    if (!matchSchedule(currentHour, this.fields.hour)) {\n      if (this._dstStart !== currentHour) {\n        this._dstStart = null;\n\n        this._applyTimezoneShift(currentDate, dateMathVerb, 'Hour');\n\n        continue;\n      } else if (!matchSchedule(currentHour - 1, this.fields.hour)) {\n        currentDate[dateMathVerb + 'Hour']();\n        continue;\n      }\n    } else if (this._dstEnd === currentHour) {\n      if (!reverse) {\n        this._dstEnd = null;\n\n        this._applyTimezoneShift(currentDate, 'add', 'Hour');\n\n        continue;\n      }\n    } // Match minute\n\n\n    if (!matchSchedule(currentDate.getMinutes(), this.fields.minute)) {\n      this._applyTimezoneShift(currentDate, dateMathVerb, 'Minute');\n\n      continue;\n    } // Match second\n\n\n    if (!matchSchedule(currentDate.getSeconds(), this.fields.second)) {\n      this._applyTimezoneShift(currentDate, dateMathVerb, 'Second');\n\n      continue;\n    } // Increase a second in case in the first iteration the currentDate was not\n    // modified\n\n\n    if (startTimestamp === currentDate.getTime()) {\n      if (dateMathVerb === 'add' || currentDate.getMilliseconds() === 0) {\n        this._applyTimezoneShift(currentDate, dateMathVerb, 'Second');\n      } else {\n        currentDate.setMilliseconds(0);\n      }\n\n      continue;\n    }\n\n    break;\n  }\n\n  if (stepCount >= LOOP_LIMIT) {\n    throw new Error('Invalid expression, loop limit exceeded');\n  }\n\n  this._currentDate = new CronDate(currentDate, this._tz);\n  this._hasIterated = true;\n  return currentDate;\n};\n/**\n * Find next suitable date\n *\n * @public\n * @return {CronDate|Object}\n */\n\n\nCronExpression.prototype.next = function next() {\n  var schedule = this._findSchedule(); // Try to return ES6 compatible iterator\n\n\n  if (this._isIterator) {\n    return {\n      value: schedule,\n      done: !this.hasNext()\n    };\n  }\n\n  return schedule;\n};\n/**\n * Find previous suitable date\n *\n * @public\n * @return {CronDate|Object}\n */\n\n\nCronExpression.prototype.prev = function prev() {\n  var schedule = this._findSchedule(true); // Try to return ES6 compatible iterator\n\n\n  if (this._isIterator) {\n    return {\n      value: schedule,\n      done: !this.hasPrev()\n    };\n  }\n\n  return schedule;\n};\n/**\n * Check if next suitable date exists\n *\n * @public\n * @return {Boolean}\n */\n\n\nCronExpression.prototype.hasNext = function () {\n  var current = this._currentDate;\n  var hasIterated = this._hasIterated;\n\n  try {\n    this._findSchedule();\n\n    return true;\n  } catch (err) {\n    return false;\n  } finally {\n    this._currentDate = current;\n    this._hasIterated = hasIterated;\n  }\n};\n/**\n * Check if previous suitable date exists\n *\n * @public\n * @return {Boolean}\n */\n\n\nCronExpression.prototype.hasPrev = function () {\n  var current = this._currentDate;\n  var hasIterated = this._hasIterated;\n\n  try {\n    this._findSchedule(true);\n\n    return true;\n  } catch (err) {\n    return false;\n  } finally {\n    this._currentDate = current;\n    this._hasIterated = hasIterated;\n  }\n};\n/**\n * Iterate over expression iterator\n *\n * @public\n * @param {Number} steps Numbers of steps to iterate\n * @param {Function} callback Optional callback\n * @return {Array} Array of the iterated results\n */\n\n\nCronExpression.prototype.iterate = function iterate(steps, callback) {\n  var dates = [];\n\n  if (steps >= 0) {\n    for (var i = 0, c = steps; i < c; i++) {\n      try {\n        var item = this.next();\n        dates.push(item); // Fire the callback\n\n        if (callback) {\n          callback(item, i);\n        }\n      } catch (err) {\n        break;\n      }\n    }\n  } else {\n    for (var i = 0, c = steps; i > c; i--) {\n      try {\n        var item = this.prev();\n        dates.push(item); // Fire the callback\n\n        if (callback) {\n          callback(item, i);\n        }\n      } catch (err) {\n        break;\n      }\n    }\n  }\n\n  return dates;\n};\n/**\n * Reset expression iterator state\n *\n * @public\n */\n\n\nCronExpression.prototype.reset = function reset(newDate) {\n  this._currentDate = new CronDate(newDate || this._options.currentDate);\n};\n/**\n * Stringify the expression\n *\n * @public\n * @param {Boolean} [includeSeconds] Should stringify seconds\n * @return {String}\n */\n\n\nCronExpression.prototype.stringify = function stringify(includeSeconds) {\n  var resultArr = [];\n\n  for (var i = includeSeconds ? 0 : 1, c = CronExpression.map.length; i < c; ++i) {\n    var field = CronExpression.map[i];\n    var value = this.fields[field];\n    var constraint = CronExpression.constraints[i];\n    resultArr.push(stringifyField(value, constraint.min, constraint.max));\n  }\n\n  return resultArr.join(' ');\n};\n/**\n * Parse input expression (async)\n *\n * @public\n * @param {String} expression Input expression\n * @param {Object} [options] Parsing options\n */\n\n\nCronExpression.parse = function parse(expression, options) {\n  var self = this;\n\n  if (typeof options === 'function') {\n    options = {};\n  }\n\n  function parse(expression, options) {\n    if (!options) {\n      options = {};\n    }\n\n    if (typeof options.currentDate === 'undefined') {\n      options.currentDate = new CronDate(undefined, self._tz);\n    } // Is input expression predefined?\n\n\n    if (CronExpression.predefined[expression]) {\n      expression = CronExpression.predefined[expression];\n    } // Split fields\n\n\n    var fields = [];\n    var atoms = (expression + '').trim().split(/\\s+/);\n\n    if (atoms.length > 6) {\n      throw new Error('Invalid cron expression');\n    } // Resolve fields\n\n\n    var start = CronExpression.map.length - atoms.length;\n\n    for (var i = 0, c = CronExpression.map.length; i < c; ++i) {\n      var field = CronExpression.map[i]; // Field name\n\n      var value = atoms[atoms.length > c ? i : i - start]; // Field value\n\n      if (i < start || !value) {\n        // Use default value\n        fields.push(CronExpression._parseField(field, CronExpression.parseDefaults[i], CronExpression.constraints[i]));\n      } else {\n        var val = field === 'dayOfWeek' ? parseNthDay(value) : value;\n        fields.push(CronExpression._parseField(field, val, CronExpression.constraints[i]));\n      }\n    }\n\n    var mappedFields = {};\n\n    for (var i = 0, c = CronExpression.map.length; i < c; i++) {\n      var key = CronExpression.map[i];\n      mappedFields[key] = fields[i];\n    }\n\n    var dayOfMonth = CronExpression._handleMaxDaysInMonth(mappedFields);\n\n    mappedFields.dayOfMonth = dayOfMonth || mappedFields.dayOfMonth;\n    return new CronExpression(mappedFields, options);\n    /**\n     * Parses out the # special character for the dayOfWeek field & adds it to options.\n     *\n     * @param {String} val\n     * @return {String}\n     * @private\n     */\n\n    function parseNthDay(val) {\n      var atoms = val.split('#');\n\n      if (atoms.length > 1) {\n        var nthValue = +atoms[atoms.length - 1];\n\n        if (/,/.test(val)) {\n          throw new Error('Constraint error, invalid dayOfWeek `#` and `,` ' + 'special characters are incompatible');\n        }\n\n        if (/\\//.test(val)) {\n          throw new Error('Constraint error, invalid dayOfWeek `#` and `/` ' + 'special characters are incompatible');\n        }\n\n        if (/-/.test(val)) {\n          throw new Error('Constraint error, invalid dayOfWeek `#` and `-` ' + 'special characters are incompatible');\n        }\n\n        if (atoms.length > 2 || safeIsNaN(nthValue) || nthValue < 1 || nthValue > 5) {\n          throw new Error('Constraint error, invalid dayOfWeek occurrence number (#)');\n        }\n\n        options.nthDayOfWeek = nthValue;\n        return atoms[0];\n      }\n\n      return val;\n    }\n  }\n\n  return parse(expression, options);\n};\n/**\n * Convert cron fields back to Cron Expression\n *\n * @public\n * @param {Object} fields Input fields\n * @param {Object} [options] Parsing options\n * @return {Object}\n */\n\n\nCronExpression.fieldsToExpression = function fieldsToExpression(fields, options) {\n  function validateConstraints(field, values, constraints) {\n    if (!values) {\n      throw new Error('Validation error, Field ' + field + ' is missing');\n    }\n\n    if (values.length === 0) {\n      throw new Error('Validation error, Field ' + field + ' contains no values');\n    }\n\n    for (var i = 0, c = values.length; i < c; i++) {\n      var value = values[i];\n\n      if (typeof value === 'string' && constraints.chars.indexOf(value) > -1) {\n        continue;\n      } // Check constraints\n\n\n      if (typeof value !== 'number' || safeIsNaN(value) || value < constraints.min || value > constraints.max) {\n        throw new Error('Constraint error, got value ' + value + ' expected range ' + constraints.min + '-' + constraints.max);\n      }\n    }\n  }\n\n  var mappedFields = {};\n\n  for (var i = 0, c = CronExpression.map.length; i < c; ++i) {\n    var field = CronExpression.map[i]; // Field name\n\n    var values = fields[field];\n    validateConstraints(field, values, CronExpression.constraints[i]);\n    var copy = [];\n    var j = -1;\n\n    while (++j < values.length) {\n      copy[j] = values[j];\n    }\n\n    values = copy.sort(CronExpression._sortCompareFn).filter(function (item, pos, ary) {\n      return !pos || item !== ary[pos - 1];\n    });\n\n    if (values.length !== copy.length) {\n      throw new Error('Validation error, Field ' + field + ' contains duplicate values');\n    }\n\n    mappedFields[field] = values;\n  }\n\n  var dayOfMonth = CronExpression._handleMaxDaysInMonth(mappedFields);\n\n  mappedFields.dayOfMonth = dayOfMonth || mappedFields.dayOfMonth;\n  return new CronExpression(mappedFields, options || {});\n};\n\nmodule.exports = CronExpression;","map":{"version":3,"sources":["/home/iwc/다운로드/BEB_01_final2-contract/Client/node_modules/cron-parser/lib/expression.js"],"names":["CronDate","require","safeIsNaN","stringifyField","LOOP_LIMIT","CronExpression","fields","options","_options","_utc","utc","_tz","tz","_currentDate","currentDate","_startDate","startDate","_endDate","endDate","_isIterator","iterator","_hasIterated","_nthDayOfWeek","nthDayOfWeek","_freezeFields","map","predefined","constraints","min","max","chars","daysInMonth","aliases","month","jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec","dayOfWeek","sun","mon","tue","wed","thu","fri","sat","parseDefaults","standardValidCharacters","dayOfWeekValidCharacters","dayOfMonthValidCharacters","validCharacters","second","minute","hour","dayOfMonth","_parseField","field","value","replace","match","toLowerCase","Error","test","indexOf","parseSequence","val","stack","handleResult","result","Array","i","c","length","push","numResult","atoms","split","every","atom","parseRepeat","sort","_sortCompareFn","repeatInterval","parseRange","repeatIndex","index","count","a","b","aIsNumber","bIsNumber","localeCompare","_handleMaxDaysInMonth","mappedFields","filter","Object","freeze","prototype","_applyTimezoneShift","dateMathVerb","method","prevTime","getTime","currTime","getMinutes","getSeconds","addHour","subtractHour","previousHour","getHours","currentHour","diff","_dstStart","_dstEnd","_findSchedule","reverse","matchSchedule","sequence","isNthDayMatch","date","getDate","offset","adjustedDate","occurrence","Math","floor","isLInDayOfMonth","startTimestamp","stepCount","dayOfMonthMatch","isLastDayOfMonth","dayOfWeekMatch","getDay","isDayOfMonthWildcardMatch","getMonth","isDayOfWeekWildcardMatch","getMilliseconds","setMilliseconds","next","schedule","done","hasNext","prev","hasPrev","current","hasIterated","err","iterate","steps","callback","dates","item","reset","newDate","stringify","includeSeconds","resultArr","constraint","join","parse","expression","self","undefined","trim","start","parseNthDay","key","nthValue","fieldsToExpression","validateConstraints","values","copy","j","pos","ary","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n// Load Date class extensions\nvar CronDate = require('./date');\n\n// Get Number.isNaN or the polyfill\nvar safeIsNaN = require('is-nan');\n\nvar stringifyField = require('./field_stringify');\n\n/**\n * Cron iteration loop safety limit\n */\nvar LOOP_LIMIT = 10000;\n\n/**\n * Construct a new expression parser\n *\n * Options:\n *   currentDate: iterator start date\n *   endDate: iterator end date\n *\n * @constructor\n * @private\n * @param {Object} fields  Expression fields parsed values\n * @param {Object} options Parser options\n */\nfunction CronExpression (fields, options) {\n  this._options = options;\n  this._utc = options.utc || false;\n  this._tz = this._utc ? 'UTC' : options.tz;\n  this._currentDate = new CronDate(options.currentDate, this._tz);\n  this._startDate = options.startDate ? new CronDate(options.startDate, this._tz) : null;\n  this._endDate = options.endDate ? new CronDate(options.endDate, this._tz) : null;\n  this._isIterator = options.iterator || false;\n  this._hasIterated = false;\n  this._nthDayOfWeek = options.nthDayOfWeek || 0;\n  this.fields = CronExpression._freezeFields(fields);\n}\n\n/**\n * Field mappings\n * @type {Array}\n */\nCronExpression.map = [ 'second', 'minute', 'hour', 'dayOfMonth', 'month', 'dayOfWeek' ];\n\n/**\n * Prefined intervals\n * @type {Object}\n */\nCronExpression.predefined = {\n  '@yearly': '0 0 1 1 *',\n  '@monthly': '0 0 1 * *',\n  '@weekly': '0 0 * * 0',\n  '@daily': '0 0 * * *',\n  '@hourly': '0 * * * *'\n};\n\n/**\n * Fields constraints\n * @type {Array}\n */\nCronExpression.constraints = [\n  { min: 0, max: 59, chars: [] }, // Second\n  { min: 0, max: 59, chars: [] }, // Minute\n  { min: 0, max: 23, chars: [] }, // Hour\n  { min: 1, max: 31, chars: ['L'] }, // Day of month\n  { min: 1, max: 12, chars: [] }, // Month\n  { min: 0, max: 7, chars: [] }, // Day of week\n];\n\n/**\n * Days in month\n * @type {number[]}\n */\nCronExpression.daysInMonth = [\n  31,\n  29,\n  31,\n  30,\n  31,\n  30,\n  31,\n  31,\n  30,\n  31,\n  30,\n  31\n];\n\n/**\n * Field aliases\n * @type {Object}\n */\nCronExpression.aliases = {\n  month: {\n    jan: 1,\n    feb: 2,\n    mar: 3,\n    apr: 4,\n    may: 5,\n    jun: 6,\n    jul: 7,\n    aug: 8,\n    sep: 9,\n    oct: 10,\n    nov: 11,\n    dec: 12\n  },\n\n  dayOfWeek: {\n    sun: 0,\n    mon: 1,\n    tue: 2,\n    wed: 3,\n    thu: 4,\n    fri: 5,\n    sat: 6\n  }\n};\n\n/**\n * Field defaults\n * @type {Array}\n */\nCronExpression.parseDefaults = [ '0', '*', '*', '*', '*', '*' ];\n\nCronExpression.standardValidCharacters = /^[\\d|/|*|\\-|,]+$/;\nCronExpression.dayOfWeekValidCharacters = /^[\\d|/|*|\\-|,|\\?]+$/;\nCronExpression.dayOfMonthValidCharacters = /^[\\d|L|/|*|\\-|,|\\?]+$/;\nCronExpression.validCharacters = {\n  second: CronExpression.standardValidCharacters,\n  minute: CronExpression.standardValidCharacters,\n  hour: CronExpression.standardValidCharacters,\n  dayOfMonth: CronExpression.dayOfMonthValidCharacters,\n  month: CronExpression.standardValidCharacters,\n  dayOfWeek: CronExpression.dayOfWeekValidCharacters,\n};\n\n/**\n * Parse input interval\n *\n * @param {String} field Field symbolic name\n * @param {String} value Field value\n * @param {Array} constraints Range upper and lower constraints\n * @return {Array} Sequence of sorted values\n * @private\n */\nCronExpression._parseField = function _parseField (field, value, constraints) {\n  // Replace aliases\n  switch (field) {\n    case 'month':\n    case 'dayOfWeek':\n      var aliases = CronExpression.aliases[field];\n\n      value = value.replace(/[a-z]{1,3}/gi, function(match) {\n        match = match.toLowerCase();\n\n        if (typeof aliases[match] !== 'undefined') {\n          return aliases[match];\n        } else {\n          throw new Error('Validation error, cannot resolve alias \"' + match + '\"');\n        }\n      });\n      break;\n  }\n\n  // Check for valid characters.\n  if (!(CronExpression.validCharacters[field].test(value))) {\n    throw new Error('Invalid characters, got value: ' + value);\n  }\n\n  // Replace '*' and '?'\n  if (value.indexOf('*') !== -1) {\n    value = value.replace(/\\*/g, constraints.min + '-' + constraints.max);\n  } else if (value.indexOf('?') !== -1) {\n    value = value.replace(/\\?/g, constraints.min + '-' + constraints.max);\n  }\n\n  //\n  // Inline parsing functions\n  //\n  // Parser path:\n  //  - parseSequence\n  //    - parseRepeat\n  //      - parseRange\n\n  /**\n   * Parse sequence\n   *\n   * @param {String} val\n   * @return {Array}\n   * @private\n   */\n  function parseSequence (val) {\n    var stack = [];\n\n    function handleResult (result) {\n      if (result instanceof Array) { // Make sequence linear\n        for (var i = 0, c = result.length; i < c; i++) {\n          var value = result[i];\n\n          if (typeof value === 'string' && constraints.chars.indexOf(value) > -1) {\n            stack.push(value);\n            continue;\n          }\n          // Check constraints\n          if (typeof value !== 'number' || safeIsNaN(value) || value < constraints.min || value > constraints.max) {\n            throw new Error(\n                'Constraint error, got value ' + value + ' expected range ' +\n                constraints.min + '-' + constraints.max\n            );\n          }\n\n          stack.push(value);\n        }\n      } else { // Scalar value\n\n        if (typeof result === 'string' && constraints.chars.indexOf(result) > -1) {\n          stack.push(result);\n          return;\n        }\n\n        var numResult = +result;\n\n        // Check constraints\n        if (safeIsNaN(numResult) || numResult < constraints.min || numResult > constraints.max) {\n          throw new Error(\n            'Constraint error, got value ' + result + ' expected range ' +\n            constraints.min + '-' + constraints.max\n          );\n        }\n\n        if (field === 'dayOfWeek') {\n          numResult = numResult % 7;\n        }\n\n        stack.push(numResult);\n      }\n    }\n\n    var atoms = val.split(',');\n    if (!atoms.every(function (atom) {\n      return atom.length > 0;\n    })) {\n      throw new Error('Invalid list value format');\n    }\n\n    if (atoms.length > 1) {\n      for (var i = 0, c = atoms.length; i < c; i++) {\n        handleResult(parseRepeat(atoms[i]));\n      }\n    } else {\n      handleResult(parseRepeat(val));\n    }\n\n    stack.sort(CronExpression._sortCompareFn);\n\n    return stack;\n  }\n\n  /**\n   * Parse repetition interval\n   *\n   * @param {String} val\n   * @return {Array}\n   */\n  function parseRepeat (val) {\n    var repeatInterval = 1;\n    var atoms = val.split('/');\n\n    if (atoms.length > 1) {\n      if (atoms[0] == +atoms[0]) {\n        atoms = [atoms[0] + '-' + constraints.max, atoms[1]];\n      }\n      return parseRange(atoms[0], atoms[atoms.length - 1]);\n    }\n\n    return parseRange(val, repeatInterval);\n  }\n\n  /**\n   * Parse range\n   *\n   * @param {String} val\n   * @param {Number} repeatInterval Repetition interval\n   * @return {Array}\n   * @private\n   */\n  function parseRange (val, repeatInterval) {\n    var stack = [];\n    var atoms = val.split('-');\n\n    if (atoms.length > 1 ) {\n      // Invalid range, return value\n      if (atoms.length < 2) {\n        return +val;\n      }\n\n      if (!atoms[0].length) {\n        if (!atoms[1].length) {\n          throw new Error('Invalid range: ' + val);\n        }\n\n        return +val;\n      }\n\n      // Validate range\n      var min = +atoms[0];\n      var max = +atoms[1];\n\n      if (safeIsNaN(min) || safeIsNaN(max) ||\n          min < constraints.min || max > constraints.max) {\n        throw new Error(\n          'Constraint error, got range ' +\n          min + '-' + max +\n          ' expected range ' +\n          constraints.min + '-' + constraints.max\n        );\n      } else if (min >= max) {\n        throw new Error('Invalid range: ' + val);\n      }\n\n      // Create range\n      var repeatIndex = +repeatInterval;\n\n      if (safeIsNaN(repeatIndex) || repeatIndex <= 0) {\n        throw new Error('Constraint error, cannot repeat at every ' + repeatIndex + ' time.');\n      }\n\n      for (var index = min, count = max; index <= count; index++) {\n        if (repeatIndex > 0 && (repeatIndex % repeatInterval) === 0) {\n          repeatIndex = 1;\n          stack.push(index);\n        } else {\n          repeatIndex++;\n        }\n      }\n\n      return stack;\n    }\n\n    return safeIsNaN(+val) ? val : +val;\n  }\n\n  return parseSequence(value);\n};\n\nCronExpression._sortCompareFn = function(a, b) {\n  var aIsNumber = typeof a === 'number';\n  var bIsNumber = typeof b === 'number';\n\n  if (aIsNumber && bIsNumber) {\n    return a - b;\n  }\n\n  if (!aIsNumber && bIsNumber) {\n    return 1;\n  }\n\n  if (aIsNumber && !bIsNumber) {\n    return -1;\n  }\n\n  return a.localeCompare(b);\n};\n\nCronExpression._handleMaxDaysInMonth = function(mappedFields) {\n  // Filter out any day of month value that is larger than given month expects\n  if (mappedFields.month.length === 1) {\n    var daysInMonth = CronExpression.daysInMonth[mappedFields.month[0] - 1];\n\n    if (mappedFields.dayOfMonth[0] > daysInMonth) {\n      throw new Error('Invalid explicit day of month definition');\n    }\n\n    return mappedFields.dayOfMonth\n      .filter(function(dayOfMonth) {\n        return dayOfMonth === 'L' ? true : dayOfMonth <= daysInMonth;\n      })\n      .sort(CronExpression._sortCompareFn);\n  }\n};\n\nCronExpression._freezeFields = function(fields) {\n  for (var i = 0, c = CronExpression.map.length; i < c; ++i) {\n    var field = CronExpression.map[i]; // Field name\n    var value = fields[field];\n    fields[field] = Object.freeze(value);\n  }\n  return Object.freeze(fields);\n};\n\nCronExpression.prototype._applyTimezoneShift = function(currentDate, dateMathVerb, method) {\n  if ((method === 'Month') || (method === 'Day')) {\n    var prevTime = currentDate.getTime();\n    currentDate[dateMathVerb + method]();\n    var currTime = currentDate.getTime();\n    if (prevTime === currTime) {\n      // Jumped into a not existent date due to a DST transition\n      if ((currentDate.getMinutes() === 0) &&\n          (currentDate.getSeconds() === 0)) {\n        currentDate.addHour();\n      } else if ((currentDate.getMinutes() === 59) &&\n                 (currentDate.getSeconds() === 59)) {\n        currentDate.subtractHour();\n      }\n    }\n  } else {\n    var previousHour = currentDate.getHours();\n    currentDate[dateMathVerb + method]();\n    var currentHour = currentDate.getHours();\n    var diff = currentHour - previousHour;\n    if (diff === 2) {\n        // Starting DST\n        if (this.fields.hour.length !== 24) {\n          // Hour is specified\n          this._dstStart = currentHour;\n        }\n      } else if ((diff === 0) &&\n                 (currentDate.getMinutes() === 0) &&\n                 (currentDate.getSeconds() === 0)) {\n        // Ending DST\n        if (this.fields.hour.length !== 24) {\n          // Hour is specified\n          this._dstEnd = currentHour;\n        }\n      }\n  }\n};\n\n\n/**\n * Find next or previous matching schedule date\n *\n * @return {CronDate}\n * @private\n */\nCronExpression.prototype._findSchedule = function _findSchedule (reverse) {\n\n  /**\n   * Match field value\n   *\n   * @param {String} value\n   * @param {Array} sequence\n   * @return {Boolean}\n   * @private\n   */\n  function matchSchedule (value, sequence) {\n    for (var i = 0, c = sequence.length; i < c; i++) {\n      if (sequence[i] >= value) {\n        return sequence[i] === value;\n      }\n    }\n\n    return sequence[0] === value;\n  }\n\n  /**\n   * Helps determine if the provided date is the correct nth occurence of the\n   * desired day of week.\n   *\n   * @param {CronDate} date\n   * @param {Number} nthDayOfWeek\n   * @return {Boolean}\n   * @private\n   */\n  function isNthDayMatch(date, nthDayOfWeek) {\n    if (nthDayOfWeek < 6) {\n      if (\n        date.getDate() < 8 &&\n        nthDayOfWeek === 1 // First occurence has to happen in first 7 days of the month\n      ) {\n        return true;\n      }\n\n      var offset = date.getDate() % 7 ? 1 : 0; // Math is off by 1 when dayOfWeek isn't divisible by 7\n      var adjustedDate = date.getDate() - (date.getDate() % 7); // find the first occurance\n      var occurrence = Math.floor(adjustedDate / 7) + offset;\n\n      return occurrence === nthDayOfWeek;\n    }\n\n    return false;\n  }\n\n  /**\n   * Helper function that checks if 'L' is in the array\n   *\n   * @param {Array} dayOfMonth\n   */\n  function isLInDayOfMonth(dayOfMonth) {\n    return dayOfMonth.length > 0 && dayOfMonth.indexOf('L') >= 0;\n  }\n\n  // Whether to use backwards directionality when searching\n  reverse = reverse || false;\n  var dateMathVerb = reverse ? 'subtract' : 'add';\n\n  var currentDate = new CronDate(this._currentDate, this._tz);\n  var startDate = this._startDate;\n  var endDate = this._endDate;\n\n  // Find matching schedule\n  var startTimestamp = currentDate.getTime();\n  var stepCount = 0;\n\n  while (stepCount < LOOP_LIMIT) {\n    stepCount++;\n\n    // Validate timespan\n    if (reverse) {\n      if (startDate && (currentDate.getTime() - startDate.getTime() < 0)) {\n        throw new Error('Out of the timespan range');\n      }\n    } else {\n      if (endDate && (endDate.getTime() - currentDate.getTime()) < 0) {\n        throw new Error('Out of the timespan range');\n      }\n    }\n\n    // Day of month and week matching:\n    //\n    // \"The day of a command's execution can be specified by two fields --\n    // day of month, and day of week.  If  both\t fields\t are  restricted  (ie,\n    // aren't  *),  the command will be run when either field matches the cur-\n    // rent time.  For example, \"30 4 1,15 * 5\" would cause a command to be\n    // run at 4:30 am on the  1st and 15th of each month, plus every Friday.\"\n    //\n    // http://unixhelp.ed.ac.uk/CGI/man-cgi?crontab+5\n    //\n\n    var dayOfMonthMatch = matchSchedule(currentDate.getDate(), this.fields.dayOfMonth);\n    if (isLInDayOfMonth(this.fields.dayOfMonth)) {\n      dayOfMonthMatch = dayOfMonthMatch || currentDate.isLastDayOfMonth();\n    }\n    var dayOfWeekMatch = matchSchedule(currentDate.getDay(), this.fields.dayOfWeek);\n    var isDayOfMonthWildcardMatch = this.fields.dayOfMonth.length >= CronExpression.daysInMonth[currentDate.getMonth()];\n    var isDayOfWeekWildcardMatch = this.fields.dayOfWeek.length === CronExpression.constraints[5].max - CronExpression.constraints[5].min + 1;\n    var currentHour = currentDate.getHours();\n\n    // Add or subtract day if select day not match with month (according to calendar)\n    if (!dayOfMonthMatch && !dayOfWeekMatch) {\n      this._applyTimezoneShift(currentDate, dateMathVerb, 'Day');\n      continue;\n    }\n\n    // Add or subtract day if not day of month is set (and no match) and day of week is wildcard\n    if (!isDayOfMonthWildcardMatch && isDayOfWeekWildcardMatch && !dayOfMonthMatch) {\n      this._applyTimezoneShift(currentDate, dateMathVerb, 'Day');\n      continue;\n    }\n\n    // Add or subtract day if not day of week is set (and no match) and day of month is wildcard\n    if (isDayOfMonthWildcardMatch && !isDayOfWeekWildcardMatch && !dayOfWeekMatch) {\n      this._applyTimezoneShift(currentDate, dateMathVerb, 'Day');\n      continue;\n    }\n\n    // Add or subtract day if day of week & nthDayOfWeek are set (and no match)\n    if (\n      this._nthDayOfWeek > 0 &&\n      !isNthDayMatch(currentDate, this._nthDayOfWeek)\n    ) {\n      this._applyTimezoneShift(currentDate, dateMathVerb, 'Day');\n      continue;\n    }\n\n    // Match month\n    if (!matchSchedule(currentDate.getMonth() + 1, this.fields.month)) {\n      this._applyTimezoneShift(currentDate, dateMathVerb, 'Month');\n      continue;\n    }\n\n    // Match hour\n    if (!matchSchedule(currentHour, this.fields.hour)) {\n      if (this._dstStart !== currentHour) {\n        this._dstStart = null;\n        this._applyTimezoneShift(currentDate, dateMathVerb, 'Hour');\n        continue;\n      } else if (!matchSchedule(currentHour - 1, this.fields.hour)) {\n        currentDate[dateMathVerb + 'Hour']();\n        continue;\n      }\n    } else if (this._dstEnd === currentHour) {\n      if (!reverse) {\n        this._dstEnd = null;\n        this._applyTimezoneShift(currentDate, 'add', 'Hour');\n        continue;\n      }\n    }\n\n    // Match minute\n    if (!matchSchedule(currentDate.getMinutes(), this.fields.minute)) {\n      this._applyTimezoneShift(currentDate, dateMathVerb, 'Minute');\n      continue;\n    }\n\n    // Match second\n    if (!matchSchedule(currentDate.getSeconds(), this.fields.second)) {\n      this._applyTimezoneShift(currentDate, dateMathVerb, 'Second');\n      continue;\n    }\n\n    // Increase a second in case in the first iteration the currentDate was not\n    // modified\n    if (startTimestamp === currentDate.getTime()) {\n      if ((dateMathVerb === 'add') || (currentDate.getMilliseconds() === 0)) {\n        this._applyTimezoneShift(currentDate, dateMathVerb, 'Second');\n      } else {\n        currentDate.setMilliseconds(0);\n      }\n\n      continue;\n    }\n\n    break;\n  }\n\n  if (stepCount >= LOOP_LIMIT) {\n    throw new Error('Invalid expression, loop limit exceeded');\n  }\n\n  this._currentDate = new CronDate(currentDate, this._tz);\n  this._hasIterated = true;\n\n  return currentDate;\n};\n\n/**\n * Find next suitable date\n *\n * @public\n * @return {CronDate|Object}\n */\nCronExpression.prototype.next = function next () {\n  var schedule = this._findSchedule();\n\n  // Try to return ES6 compatible iterator\n  if (this._isIterator) {\n    return {\n      value: schedule,\n      done: !this.hasNext()\n    };\n  }\n\n  return schedule;\n};\n\n/**\n * Find previous suitable date\n *\n * @public\n * @return {CronDate|Object}\n */\nCronExpression.prototype.prev = function prev () {\n  var schedule = this._findSchedule(true);\n\n  // Try to return ES6 compatible iterator\n  if (this._isIterator) {\n    return {\n      value: schedule,\n      done: !this.hasPrev()\n    };\n  }\n\n  return schedule;\n};\n\n/**\n * Check if next suitable date exists\n *\n * @public\n * @return {Boolean}\n */\nCronExpression.prototype.hasNext = function() {\n  var current = this._currentDate;\n  var hasIterated = this._hasIterated;\n\n  try {\n    this._findSchedule();\n    return true;\n  } catch (err) {\n    return false;\n  } finally {\n    this._currentDate = current;\n    this._hasIterated = hasIterated;\n  }\n};\n\n/**\n * Check if previous suitable date exists\n *\n * @public\n * @return {Boolean}\n */\nCronExpression.prototype.hasPrev = function() {\n  var current = this._currentDate;\n  var hasIterated = this._hasIterated;\n\n  try {\n    this._findSchedule(true);\n    return true;\n  } catch (err) {\n    return false;\n  } finally {\n    this._currentDate = current;\n    this._hasIterated = hasIterated;\n  }\n};\n\n/**\n * Iterate over expression iterator\n *\n * @public\n * @param {Number} steps Numbers of steps to iterate\n * @param {Function} callback Optional callback\n * @return {Array} Array of the iterated results\n */\nCronExpression.prototype.iterate = function iterate (steps, callback) {\n  var dates = [];\n\n  if (steps >= 0) {\n    for (var i = 0, c = steps; i < c; i++) {\n      try {\n        var item = this.next();\n        dates.push(item);\n\n        // Fire the callback\n        if (callback) {\n          callback(item, i);\n        }\n      } catch (err) {\n        break;\n      }\n    }\n  } else {\n    for (var i = 0, c = steps; i > c; i--) {\n      try {\n        var item = this.prev();\n        dates.push(item);\n\n        // Fire the callback\n        if (callback) {\n          callback(item, i);\n        }\n      } catch (err) {\n        break;\n      }\n    }\n  }\n\n  return dates;\n};\n\n/**\n * Reset expression iterator state\n *\n * @public\n */\nCronExpression.prototype.reset = function reset (newDate) {\n  this._currentDate = new CronDate(newDate || this._options.currentDate);\n};\n\n/**\n * Stringify the expression\n *\n * @public\n * @param {Boolean} [includeSeconds] Should stringify seconds\n * @return {String}\n */\nCronExpression.prototype.stringify = function stringify(includeSeconds) {\n  var resultArr = [];\n  for (var i = includeSeconds ? 0 : 1, c = CronExpression.map.length; i < c; ++i) {\n    var field = CronExpression.map[i];\n    var value = this.fields[field];\n    var constraint = CronExpression.constraints[i];\n    resultArr.push(stringifyField(value, constraint.min, constraint.max));\n  }\n  return resultArr.join(' ');\n};\n\n/**\n * Parse input expression (async)\n *\n * @public\n * @param {String} expression Input expression\n * @param {Object} [options] Parsing options\n */\nCronExpression.parse = function parse(expression, options) {\n  var self = this;\n  if (typeof options === 'function') {\n    options = {};\n  }\n\n  function parse (expression, options) {\n    if (!options) {\n      options = {};\n    }\n\n    if (typeof options.currentDate === 'undefined') {\n      options.currentDate = new CronDate(undefined, self._tz);\n    }\n\n    // Is input expression predefined?\n    if (CronExpression.predefined[expression]) {\n      expression = CronExpression.predefined[expression];\n    }\n\n    // Split fields\n    var fields = [];\n    var atoms = (expression + '').trim().split(/\\s+/);\n\n    if (atoms.length > 6) {\n      throw new Error('Invalid cron expression');\n    }\n\n    // Resolve fields\n    var start = (CronExpression.map.length - atoms.length);\n    for (var i = 0, c = CronExpression.map.length; i < c; ++i) {\n      var field = CronExpression.map[i]; // Field name\n      var value = atoms[atoms.length > c ? i : i - start]; // Field value\n\n      if (i < start || !value) { // Use default value\n        fields.push(CronExpression._parseField(\n          field,\n          CronExpression.parseDefaults[i],\n          CronExpression.constraints[i]\n          )\n        );\n      } else {\n        var val = field === 'dayOfWeek' ? parseNthDay(value) : value;\n\n        fields.push(CronExpression._parseField(\n          field,\n          val,\n          CronExpression.constraints[i]\n          )\n        );\n      }\n    }\n\n    var mappedFields = {};\n    for (var i = 0, c = CronExpression.map.length; i < c; i++) {\n      var key = CronExpression.map[i];\n      mappedFields[key] = fields[i];\n    }\n\n    var dayOfMonth = CronExpression._handleMaxDaysInMonth(mappedFields);\n    mappedFields.dayOfMonth = dayOfMonth || mappedFields.dayOfMonth;\n    return new CronExpression(mappedFields, options);\n\n    /**\n     * Parses out the # special character for the dayOfWeek field & adds it to options.\n     *\n     * @param {String} val\n     * @return {String}\n     * @private\n     */\n    function parseNthDay(val) {\n      var atoms = val.split('#');\n      if (atoms.length > 1) {\n        var nthValue = +atoms[atoms.length - 1];\n        if(/,/.test(val)) {\n          throw new Error('Constraint error, invalid dayOfWeek `#` and `,` '\n            + 'special characters are incompatible');\n        }\n        if(/\\//.test(val)) {\n          throw new Error('Constraint error, invalid dayOfWeek `#` and `/` '\n            + 'special characters are incompatible');\n        }\n        if(/-/.test(val)) {\n          throw new Error('Constraint error, invalid dayOfWeek `#` and `-` '\n            + 'special characters are incompatible');\n        }\n        if (atoms.length > 2 || safeIsNaN(nthValue) || (nthValue < 1 || nthValue > 5)) {\n          throw new Error('Constraint error, invalid dayOfWeek occurrence number (#)');\n        }\n\n        options.nthDayOfWeek = nthValue;\n        return atoms[0];\n      }\n      return val;\n    }\n  }\n\n  return parse(expression, options);\n};\n\n/**\n * Convert cron fields back to Cron Expression\n *\n * @public\n * @param {Object} fields Input fields\n * @param {Object} [options] Parsing options\n * @return {Object}\n */\nCronExpression.fieldsToExpression = function fieldsToExpression(fields, options) {\n  function validateConstraints (field, values, constraints) {\n    if (!values) {\n      throw new Error('Validation error, Field ' + field + ' is missing');\n    }\n    if (values.length === 0) {\n      throw new Error('Validation error, Field ' + field + ' contains no values');\n    }\n    for (var i = 0, c = values.length; i < c; i++) {\n      var value = values[i];\n\n      if (typeof value === 'string' && constraints.chars.indexOf(value) > -1) {\n        continue;\n      }\n      // Check constraints\n      if (typeof value !== 'number' || safeIsNaN(value) || value < constraints.min || value > constraints.max) {\n        throw new Error(\n          'Constraint error, got value ' + value + ' expected range ' +\n          constraints.min + '-' + constraints.max\n        );\n      }\n    }\n  }\n\n  var mappedFields = {};\n  for (var i = 0, c = CronExpression.map.length; i < c; ++i) {\n    var field = CronExpression.map[i]; // Field name\n    var values = fields[field];\n    validateConstraints(\n      field,\n      values,\n      CronExpression.constraints[i]\n    );\n    var copy = [];\n    var j = -1;\n    while (++j < values.length) {\n      copy[j] = values[j];\n    }\n    values = copy.sort(CronExpression._sortCompareFn)\n      .filter(function(item, pos, ary) {\n        return !pos || item !== ary[pos - 1];\n      });\n    if (values.length !== copy.length) {\n      throw new Error('Validation error, Field ' + field + ' contains duplicate values');\n    }\n    mappedFields[field] = values;\n  }\n  var dayOfMonth = CronExpression._handleMaxDaysInMonth(mappedFields);\n  mappedFields.dayOfMonth = dayOfMonth || mappedFields.dayOfMonth;\n  return new CronExpression(mappedFields, options || {});\n};\n\nmodule.exports = CronExpression;\n"]},"metadata":{},"sourceType":"script"}